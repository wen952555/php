// frontend/src/components/HandDisplay.jsx
import React from 'react';
import Card from './Card';
import './HandDisplay.css';

const HandDisplay = ({ playerName, handData, isSelf, roomStatus }) => {
    if (!handData || !handData.evaluated || (!handData.evaluated.front && !handData.specialHandType && roomStatus !== 'playing' && roomStatus !== 'dealing')) { return ( <div className={`hand-display-wrapper ${isSelf ? 'self' : 'opponent'}`}> <p className="player-name-display"> {playerName || '玩家'}{isSelf ? ' (你)' : ''}: {(roomStatus === 'playing' && !handData?.submitted) ? " 摆牌中..." : " 等待数据..."} </p> </div> ); }
    const { front, middle, back, evaluated, isWuLong, roundPoints, specialHandType, submitted } = handData;
    const playerDisplayName = `${playerName || '玩家'}${isSelf ? ' (你)' : ''}`;
    const renderSegment = (segmentName, cards, evalResult, segmentKey) => { if (!evalResult || !evalResult.name) { if (specialHandType) return null; if (!cards || cards.length === 0) return <div className="segment-display"><strong className="segment-name">{segmentName}: (未摆放)</strong></div>; return <div className="segment-display"><strong className="segment-name">{segmentName}: (评估错误)</strong></div>; } const segmentTitle = `${segmentName} - ${evalResult.name}`; return ( <div className={`segment-display ${segmentKey}-segment`}> <strong className="segment-name">{segmentTitle}</strong> <div className="cards-in-segment hand-row"> {cards && cards.length > 0 ? ( cards.map((card) => <Card key={card?.id || `card-${segmentKey}-${Math.random()}`} card={card} />) ) : ( !specialHandType && <p className="no-cards-text">未摆放</p> )} </div> </div> ); };
    if ((roomStatus === 'playing' || roomStatus === 'dealing') && !submitted && !isSelf) { return ( <div className={`hand-display-wrapper ${isSelf ? 'self' : 'opponent'}`}> <h4 className="player-name-display">{playerDisplayName}</h4> <p className="status-note">正在操作...</p> </div> ); }
    return ( <div className={`hand-display-wrapper ${isSelf ? 'self' : 'opponent'} ${isWuLong && !specialHandType ? 'wulong' : ''} ${specialHandType ? 'special-hand' : ''}`}> <div className="hand-display-header"> <h4 className="player-name-display">{playerDisplayName}</h4> <div className="tags-container"> {isWuLong && !specialHandType && <span className="tag wulong-tag">(乌龙!)</span>} {specialHandType && <span className="tag special-hand-tag">({specialHandType})</span>} </div> {roomStatus === 'finished' && typeof roundPoints === 'number' && ( <span className={`round-points-display ${roundPoints > 0 ? 'positive' : (roundPoints < 0 ? 'negative' : 'zero')}`}> 本局: {roundPoints > 0 ? `+${roundPoints}` : roundPoints} </span> )} </div> {specialHandType ? ( <div className="special-hand-details"> <p className="special-type-announce">{specialHandType}!</p> {evaluated.front && renderSegment('头道', front, evaluated.front, 'front')} {evaluated.middle && renderSegment('中道', middle, evaluated.middle, 'middle')} {evaluated.back && renderSegment('尾道', back, evaluated.back, 'back')} </div> ) : ( <div className="all-segments"> {evaluated.front ? renderSegment('头道', front, evaluated.front, 'front') : <div className="segment-display"><strong className="segment-name">头道: (未提交/数据错误)</strong></div>} {evaluated.middle ? renderSegment('中道', middle, evaluated.middle, 'middle') : <div className="segment-display"><strong className="segment-name">中道: (未提交/数据错误)</strong></div>} {evaluated.back ? renderSegment('尾道', back, evaluated.back, 'back') : <div className="segment-display"><strong className="segment-name">尾道: (未提交/数据错误)</strong></div>} </div> )} </div> );
};
export default HandDisplay;
